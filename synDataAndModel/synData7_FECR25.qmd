---
title:  "Dynamic TWFE models with cluster robust standard errors"
author: "Jeff Wu"
date:   "2025-06-07"
format: html
editor: visual
number-sections: true
number-depth: 3
---

```{r}
#| echo: false
#| output: false

# Housekeeping
source("https://raw.githubusercontent.com/jeffzifanwu/rProject/main/procedures/beginScript.R")

# load library
library(dplyr)
library(dataHelper)
library(DT)
library(panelView) # for visualising panel data
library(fixest)    # fixed effect estimation
library(clubSandwich) # cluster robust standard error
library(fect)      # label cohorts in DiD
library(tibble)
library(stringr)
```

------------------------------------------------------------------------

# Introduction

The `clubSandwich` package implements a range of robust variance-covariance estimators that are both cluster-robust and small-sample corrected, while `fixest` is widely used for estimating regression models with multi-way fixed effects. In a recent project, I estimated a dynamic TWFE model using `feols()` from `fixest` to test for parallel pre-trends. The errors (residuals) in my data were clearly clustered. Although `fixest` has built-in support for cluster-robust errors, these are not small-sample corrected. As the number of clusters in my dataset was not sufficiently large, large language models (LLMs) recommended passing the `fixest`-estimated model to `vcovCR()` from `clubSandwich` to compute cluster-robust standard errors. However, I discovered that `fixest` and `clubSandwich` are not fully compatible.

Both `fixest` and `clubSandwich` are widely used tools for a broad range of research designs, such as difference-in-differences and event studies. Therefore, the incompatibility between these two packages represents a notable limitation. In this post, I explain the source of this incompatibility, provide numerical examples showing that `vcovCR()` from `clubSandwich` does not compute standard errors for `fixest`-style models in general, and share some practical solutions.

# Simulation

We simulate a dataset following the data-generating process outlined in [CRSE25](https://jeffzifanwu.github.io/3_portfolio/CRSE25/synData6_clusterRobustStandardErrors.html) (see Section 3: TWFE with correlated errors). Please note: the sample comprises 810 observations across 60 clusters, which does not justify the use of the conventional cluster robust variance-covariance estimator provided by `fixest`.

```{r}
# Number of sites (clusters) and periods 
nSite   = 30
nPeriod = 28

# Generate Ids
df.tc = genDimIds(
    dimSize = c(nSite, nPeriod)
  , dimName = c("site_id", "period_id")
)

# Generate individual error terms
df.tc$indivdu_err = rnorm(nrow(df.tc), mean = 0, sd = 10)

# Generate site fixed effects
df.siteEffect = data.frame(site_id = 1:nSite) %>%
  # site fiexed effect equal to its site id
  mutate(site_fixed_effect = site_id)

df.tc = df.tc %>%
  left_join(df.siteEffect, by = "site_id")

# Generate period fixed effects
df.tc = df.tc %>%
  group_by(period_id) %>%
  # Period id is a Multiple of 7: -20, otherwise 0
  mutate(period_fixed_effect = ifelse(period_id %% 7 == 0, -20, 0)) %>%
  ungroup()

# Generate base traffic
df.tc$base = 100

# - - - - - - - - - - - - - - - - 
# Generate treatmnent effects
# - - - - - - - - - - - - - - - -

# Label treatment group  
df.tc = df.tc %>%
  # 2/3 are in treatment group, 1/3 in control group
  mutate(treatment_group = if_else(site_id <= 2/3*nSite, TRUE, FALSE))

# Generate post policy indicator
df.tc = df.tc %>%
  # policy implemented after the 14th period
  mutate(post_policy = if_else(period_id > 14, TRUE, FALSE))

# Label treated units: in treatment group and post policy
df.tc = df.tc %>%
  mutate(is_treated = if_else(treatment_group & post_policy, 1, 0))

# Generate treatment effects
df.tc = df.tc %>%
  mutate(treatment_effect = is_treated*(-50))

# - - - - - - - - - - - - - - - -

# Generate cluster Ids
df.cluster = df.tc %>%
  distinct(site_id, post_policy) %>%
  arrange(site_id, post_policy) %>%
  mutate(cluster_id = row_number()) %>%
  mutate(cluster_err= rnorm(nrow(.), mean = 0, sd = 10))

df.tc = df.tc %>%
  left_join(df.cluster, by = c("site_id", "post_policy"))

# Generate outcome 
df.tc = df.tc %>%
  mutate(y = base +
           site_fixed_effect +
           period_fixed_effect +
           treatment_effect +
           cluster_err +
           indivdu_err
           )

```

```{r}
#| echo: false
#| output: false

DT::datatable(
  df.tc,
  filter     = 'top',
  extensions = 'Buttons',
  options = list(
    pageLength = 14,     # Number of rows per page
    lengthMenu = c(14, 28),  # Dropdown to change rows per page
    scrollX = TRUE,      # Horizontal scroll
    autoWidth = TRUE,    # Automatically adjust column widths
    buttons = c('csv')   # Enable export buttons
  ))
```

## Visualisation

```{r}
# plot treatment status
panelview(
  y ~ is_treated, 
  data  = df.tc,
  index = c("site_id", "period_id"),
  main  = ""
)

# plot outcomes
panelview(
  y ~ is_treated, 
  data  = df.tc,
  index = c("site_id", "period_id"),
  type  = "outcome", 
  ylab  = "Outcome",
  main  = ""
)
```

# Diagnostics

We fit a standard TWFE model with `lm()` in base R and `feols()` in `fixest` to the simulated data.

```{r}
# Convert data type (to make the estimation results clean)
df.est = df.tc %>%
  mutate(site_id   = as.factor(site_id)) %>%
  mutate(period_id = as.factor(period_id)) %>%
  mutate(cluster_id= as.factor(cluster_id)) %>%
  mutate(is_treated= as.factor(is_treated))

# Base R
mdl = lm(y ~ is_treated + site_id + period_id, data = df.est)

# CRSE with the clubsandwich package
coef_test(mdl, vcov = vcovCR(mdl,  cluster = df.tc$cluster_id, type = "CR0"))
coef_test(mdl, vcov = vcovCR(mdl,  cluster = df.tc$cluster_id, type = "CR2"))

# using fixest package
mdl = feols(y ~ is_treated|site_id + period_id, data = df.est)

# CRSE with the clubsandwich package
coef_test(mdl, vcov = vcovCR(mdl,  cluster = df.tc$cluster_id, type = "CR0"))
coef_test(mdl, vcov = vcovCR(mdl,  cluster = df.tc$cluster_id, type = "CR2"))
```

The point estiamtes are the same, but the standard errors differ. `clubSandwich` currently does not support `fixest`-style models (see [readme](https://github.com/jepusto/clubSandwich) and [issues](https://github.com/jepusto/clubSandwich/issues/61)) )

If we code site_id and period_id as dummy variables rather than fixed effects, `feols()` behaves in the same way as `lm()`.

```{r}
# using fixest package
mdl = feols(y ~ is_treated + site_id + period_id, data = df.est)

# CRSE with the clubsandwich package
coef_test(mdl, vcov = vcovCR(mdl,  cluster = df.tc$cluster_id, type = "CR0"))
coef_test(mdl, vcov = vcovCR(mdl,  cluster = df.tc$cluster_id, type = "CR2"))
```

The estiamtion results are the same as `lm()`. This syntax does not harness the advanced algorithm in `fixest` which enhances performance when estimating high-dimensional fixed effects. However, many practical features of `fixest` remain available. Most notably, for dynamic TWFE models, we can use the `i()` function to specify interaction terms between time-to-treatment and in-treatment-group variables. We will demonstrate this in the next section.

# Dynamic TWFE

We label each observation with their time to treatment. Here, we use the `get.cohort()` function from the `fect` package.

```{r}
df.tc = get.cohort(
    df.tc
  , D = "is_treated"
  , index = c("site_id", "period_id")
  , start0 = TRUE # Treatment starts at period 0
  )

DT::datatable(
  df.tc %>% select(site_id, period_id, FirstTreat, Cohort, Time_to_Treatment),
  filter     = 'top',
  extensions = 'Buttons',
  options = list(
    pageLength = 14,     # Number of rows per page
    lengthMenu = c(14, 28),  # Dropdown to change rows per page
    scrollX = TRUE,      # Horizontal scroll
    autoWidth = TRUE
  ))
```

Note that the `Time_to_Treatment` variable is `NA` for control units. We set it to -1 for control units, as we will later define `Time_to_Treatment = -1` as the reference period, i.e., $\theta_{g,-1} = 0$, $\forall g$. This ensures that `feols()` does not compute any lag and lead effects for the control units.

```{r}
# Estimation dataset
df.est = df.tc %>%
  mutate(
    site_id   = as.factor(site_id),
    period_id = as.factor(period_id),
    cluster_id= as.factor(cluster_id),
    treat_grp = if_else(treatment_group,1,0),
    tt_treat = if_else(is.na(Time_to_Treatment), 0, Time_to_Treatment)
  )

# estimate
mdl = feols(
  y ~ i(tt_treat, treat_grp, ref = -1) + site_id + period_id
  , data = df.est
  )

# CRSE
crVarCov  = vcovCR(mdl,  cluster = df.tc$cluster_id, type = "CR2")

# print results
coef_test(mdl, vcov = crVarCov)

df.result = coef_test(mdl, vcov = crVarCov) %>%
  # filter interaction terms
  filter(str_detect(Coef, ":treat_grp")) %>%
  # time to treatment, period 0 is first treatment period
  mutate(tt_treatment0 = as.numeric(sub(".*?::(-?\\d+):.*", "\\1", Coef))) %>%
  # time to treatment, period 1 is first treatment period
  mutate(tt_treatment1 = tt_treatment0 + 1)

library(ggplot2)
esplot(
   df.result
  ,Period = 'tt_treatment1'
  ,Estimate = 'beta'
  ,SE = 'SE'
  )
```

# Conclusion

This post demonstrates that `clubSandwich` does not support `fixest`-style models in general (as of 7 June 2025). However, we showed that `feols()` from `fixest` behaves in the same way as `lm()` and can be used with `clubSandwich` when `site_id` and `period_id` are coded as dummy variables rather than as fixed effects. Although this syntax does not trigger `fixest`â€™s high-performance algorithm for estimating high-dimensional fixed effects, we can still take advantage of other features offered by `fixest`. Some of these features, particularly useful for estimating dynamic TWFE models and presenting results, include `i()` and `esplot()`. Their usage is demonstrated in this post.
